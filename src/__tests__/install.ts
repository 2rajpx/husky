import del from 'del'
import * as fs from 'fs'
import * as mkdirp from 'mkdirp'
import * as path from 'path'
import * as tempy from 'tempy'
import { install, uninstall } from '../install'
import { huskyIdentifier } from '../install/hookScript'

let tempDir

function installFrom(huskyDir: string) {
  install(tempDir, path.join(tempDir, huskyDir))
}

function uninstallFrom(dir: string) {
  uninstall(tempDir, path.join(tempDir, dir))
}

function mkdir(dir: string) {
  mkdirp.sync(path.join(tempDir, dir))
}

function writeFile(filename: string, data: string) {
  fs.writeFileSync(path.join(tempDir, filename), data)
}

function readFile(filename: string) {
  return fs.readFileSync(path.join(tempDir, filename), 'utf-8')
}

function exists(filename: string) {
  return fs.existsSync(path.join(tempDir, filename))
}

function expectHookToExist(filename: string) {
  const hook = readFile(filename)
  expect(hook).toMatch(huskyIdentifier)
}

describe('install', () => {
  beforeEach(() => (tempDir = tempy.directory()))
  afterEach(() => del(tempDir, { force: true }))

  it('should install and uninstall', () => {
    const huskyDir = 'node_modules/husky'
    const hookFilename = '.git/hooks/pre-commit'

    mkdir('.git/hooks')
    mkdir(huskyDir)
    writeFile('package.json', JSON.stringify({ husky: { skipCI: false } }))

    installFrom(huskyDir)
    expectHookToExist(hookFilename)

    uninstallFrom(huskyDir)
    expect(exists(hookFilename)).toBeFalsy()
  })

  // it("should support git submodule", () => {
  //   const huskyDir = "A/B/node_modules/husky";
  //   const hookFilename = ".git/modules/A/B/hooks/pre-commit";

  //   mkdir(".git/modules/A/B");
  //   mkdir(huskyDir);
  //   writeFile("package.json", "{}");

  //   writeFile("A/B/.git", "git: ../../.git/modules/A/B");

  //   installFrom(huskyDir);
  //   expectHookToExist(hookFilename);

  //   uninstallFrom(huskyDir);
  //   expect(exists(hookFilename)).toBeFalsy();
  // });

  // it("should support git worktrees", () => {
  //   const huskyDir = "A/B/node_modules/husky";
  //   const hookFilename = ".git/worktrees/B/hooks/pre-commit";

  //   mkdir(".git/worktrees/B");
  //   mkdir(huskyDir);
  //   writeFile("package.json", "{}");

  //   // Git path for worktrees is absolute
  //   const absolutePath = path.join(tempDir, ".git/worktrees/B");
  //   writeFile("A/B/.git", `git: ${absolutePath}`);

  //   installFrom(huskyDir);
  //   expectHookToExist(hookFilename);

  //   uninstallFrom(huskyDir);
  //   expect(exists(hookFilename)).toBeFalsy();
  // });

  it('should update existing husky hooks', () => {
    const huskyDir = 'node_modules/husky'
    const hookFilename = '.git/hooks/pre-commit'

    mkdir('.git/hooks')
    mkdir(huskyDir)
    writeFile('package.json', '{}')

    // Create an existing husky hook
    writeFile(hookFilename, '# husky\nfoo')

    // Verify that it has been updated
    installFrom(huskyDir)
    const hook = readFile(hookFilename)
    expect(hook).toContain('# husky')
    expect(hook).not.toContain('foo')
  })

  it('should not modify user hooks', () => {
    const huskyDir = 'node_modules/husky'
    const hookFilename = '.git/hooks/pre-push'

    mkdir('.git/hooks')
    mkdir(huskyDir)
    writeFile('package.json', '{}')
    writeFile(hookFilename, 'foo')

    // Verify that it's not overwritten
    installFrom(huskyDir)
    const hook = readFile(hookFilename)
    expect(hook).toBe('foo')

    // Verify that it's not deleted
    uninstallFrom(huskyDir)
    expect(exists(hookFilename)).toBeTruthy()
  })

  it('should not install from /node_modules/A/node_modules', () => {
    mkdir('.git/hooks')
    mkdir('node_modules/A/node_modules/husky')
    writeFile('node_modules/A/package.json', '{}')
    writeFile('package.json', '{}')

    installFrom('node_modules/A/node_modules/husky')
    expect(exists('.git/hooks/pre-commit')).toBeFalsy()
  })

  it("should not crash if there's no .git directory", () => {
    const huskyDir = 'node_modules/husky'
    mkdir(huskyDir)
    writeFile('package.json', '{}')

    expect(() => installFrom(huskyDir)).not.toThrow()
    expect(() => uninstallFrom(huskyDir)).not.toThrow()
  })

  it('should migrate existing scripts (ghooks)', () => {
    const huskyDir = 'node_modules/husky'
    const hookFilename = '.git/hooks/pre-commit'

    mkdir('.git/hooks')
    mkdir(huskyDir)
    writeFile('package.json', '{}')
    writeFile(hookFilename, '// Generated by ghooks. Do not edit this file.')

    installFrom(huskyDir)
    const hook = readFile(hookFilename)
    expect(hook).toMatch(huskyIdentifier)
  })

  it('should migrate existing scripts (pre-commit)', () => {
    const huskyDir = 'node_modules/husky'
    const hookFilename = '.git/hooks/pre-commit'

    mkdir('.git/hooks')
    mkdir(huskyDir)
    writeFile('package.json', '{}')
    writeFile(hookFilename, './node_modules/pre-commit/hook')

    installFrom(huskyDir)
    const hook = readFile(hookFilename)
    expect(hook).toMatch(huskyIdentifier)
  })
})
